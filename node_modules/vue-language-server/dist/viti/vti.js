"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_languageserver_1 = require("vscode-languageserver");
const stream_1 = require("stream");
const vls_1 = require("../services/vls");
const initParams_1 = require("./initParams");
const fs = require("fs");
const vscode_uri_1 = require("vscode-uri");
const glob = require("glob");
const path = require("path");
const chalk = require("chalk");
class NullLogger {
    error(_message) { }
    warn(_message) { }
    info(_message) { }
    log(_message) { }
}
class TestStream extends stream_1.Duplex {
    _write(chunk, _encoding, done) {
        this.emit('data', chunk);
        done();
    }
    _read(_size) { }
}
function prepareClientConnection(workspaceUri) {
    return __awaiter(this, void 0, void 0, function* () {
        const up = new TestStream();
        const down = new TestStream();
        const logger = new NullLogger();
        const clientConnection = vscode_languageserver_protocol_1.createProtocolConnection(new vscode_languageserver_protocol_1.StreamMessageReader(down), new vscode_languageserver_protocol_1.StreamMessageWriter(up), logger);
        const serverConnection = vscode_languageserver_1.createConnection(new vscode_languageserver_protocol_1.StreamMessageReader(up), new vscode_languageserver_protocol_1.StreamMessageWriter(down));
        const vls = new vls_1.VLS(serverConnection);
        serverConnection.onInitialize((params) => __awaiter(this, void 0, void 0, function* () {
            yield vls.init(params);
            console.log('Vetur initialized');
            return {
                capabilities: vls.capabilities
            };
        }));
        vls.listen();
        clientConnection.listen();
        const init = Object.assign({ rootPath: workspaceUri.fsPath, rootUri: workspaceUri.toString() }, initParams_1.params);
        yield clientConnection.sendRequest(vscode_languageserver_protocol_1.InitializeRequest.type, init);
        return clientConnection;
    });
}
function getDiagnostics(workspaceUri) {
    return __awaiter(this, void 0, void 0, function* () {
        const clientConnection = yield prepareClientConnection(workspaceUri);
        const files = glob.sync('**/*.vue', { cwd: workspaceUri.fsPath });
        const absFilePaths = files.map(f => path.resolve(workspaceUri.fsPath, f));
        console.log('');
        for (const absFilePath of absFilePaths) {
            console.log('');
            yield clientConnection.sendNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, {
                textDocument: {
                    languageId: 'vue',
                    uri: vscode_uri_1.default.file(absFilePath).toString(),
                    version: 1,
                    text: fs.readFileSync(absFilePath, 'utf-8')
                }
            });
            try {
                const res = (yield clientConnection.sendRequest('$/getDiagnostics', {
                    uri: vscode_uri_1.default.file(absFilePath).toString()
                }));
                if (res.length > 0) {
                    console.log(`${chalk.green('File')} : ${chalk.green(absFilePath)}`);
                    res.forEach(d => {
                        if (d.severity === vscode_languageserver_protocol_1.DiagnosticSeverity.Error) {
                            console.log(`${chalk.red('Error')}: ${d.message}`);
                        }
                        else {
                            console.log(`${chalk.yellow('Error')}: ${d.message}`);
                        }
                    });
                    console.log('');
                }
            }
            catch (err) {
                console.log(err);
            }
        }
    });
}
// async function getFormattingOutput(print: boolean) {
//   const clientConnection = await prepareClientConnection();
//   const files = glob.sync('**/*.vue', { cwd: workspacePath });
//   const absFilePaths = files.map(f => path.resolve(workspacePath, f));
//   console.log('');
//   for (const absFilePath of absFilePaths) {
//     console.log('');
//     const vueFileText = fs.readFileSync(absFilePath, 'utf-8');
//     const vueFileUri = Uri.file(absFilePath).toString();
//     await clientConnection.sendNotification(DidOpenTextDocumentNotification.type, {
//       textDocument: {
//         languageId: 'vue',
//         uri: vueFileUri,
//         version: 1,
//         text: vueFileText
//       }
//     });
//     const res = await clientConnection.sendRequest(DocumentFormattingRequest.type, {
//       textDocument: {
//         uri: Uri.file(absFilePath).toString()
//       }
//     });
//     const doc = TextDocument.create(vueFileUri, 'vue', 1, vueFileText);
//     const formattedText = res ? TextDocument.applyEdits(doc, res) : vueFileText;
//     if (print) {
//       fs.writeFileSync(absFilePath, formattedText);
//       console.log(`File: ${absFilePath} rewritten`);
//     } else {
//       console.log(`File: ${absFilePath}`);
//       console.log(formattedText);
//     }
//     console.log('');
//   }
// }
const myArgs = process.argv.slice(2);
// vls diag
if (myArgs[0] === 'diagnostics') {
    console.log('Getting Vetur diagnostics');
    let workspaceUri;
    if (myArgs[1]) {
        console.log(`Loading Vetur in workspace path: ${myArgs[1]}`);
        workspaceUri = vscode_uri_1.default.file(myArgs[1]);
    }
    else {
        console.log(`Loading Vetur in current directory: ${process.cwd()}`);
        workspaceUri = vscode_uri_1.default.file(process.cwd());
    }
    console.log('====================================');
    getDiagnostics(workspaceUri).then(() => {
        console.log('====================================');
    });
}
else if (myArgs[0] === 'format') {
    console.log('Getting Vetur diagnostics');
    console.log('====================================');
    const print = myArgs[1] === '-w' || myArgs[1] === '--write';
    // getFormattingOutput(print).then(() => {
    //   console.log('====================================');
    // });
}
//# sourceMappingURL=vti.js.map